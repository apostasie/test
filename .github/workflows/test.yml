name: test

on:
  push:
    branches:
      - main
      - 'release/**'
  pull_request:

env:
  GO_VERSION: 1.22.x

jobs:
  # Build here, with buildkit cache, and registry cache, for every platform we target
  # Then commit them to local read-only registry, or local filesystem with cache commit?
  # The load them
  test-integration-build:
    runs-on: "ubuntu-24.04"
    timeout-minutes: 40
    env:
      CONTAINERD_VERSION: "${{ matrix.containerd }}"

    strategy:
      fail-fast: false
      matrix:
        include:
          - containerd: v1.6.32
          - containerd: v1.7.17
          - containerd: main

    steps:
      - uses: actions/checkout@v4.1.6
        with:
          fetch-depth: 1

      # Cache for images fetched by the build stage (golang, ubuntu, etc)
      - name: Registry cache for build stage
        id: cache-build-registry
        uses: actions/cache@v4
        with:
          path:
            ~/build-cache-registry
          key: key-build-registry-${{ github.run_id }}
          restore-keys: |
            key-build-registry-

      - name: "Configure and start registry proxy cache"
        run: |
          REGISTRY_BUILD_CACHE="$HOME/build-cache-registry"
          mkdir -p "$REGISTRY_BUILD_CACHE"
          # actions/cache cannot save root owned resource, so, we chown AFTER and BEFORE to workaround 
          #mkdir -p ~/build-cache-buildkit
          #sudo rm -Rf /var/lib/docker/buildkit
          #sudo ln -s ~/build-cache-buildkit /var/lib/docker/buildkit
          #sudo chown -R root ~/build-cache-buildkit

          # Configure docker to use the mirror
          sudo cp .github/config/daemon.json /etc/docker/
          # Configure containerd to use the mirror
          sudo mkdir -p /etc/containerd/certs.d/docker.io
          sudo cp .github/config/hosts.toml /etc/containerd/certs.d/docker.io/
          # Restart
          sudo systemctl restart docker
          sudo systemctl restart containerd

          # Start the proxy cache (FIXME: workaround github secret protection - should be a secret - though it does not matter, it is a readonly token on a test account)
          docker pull registry:2 >/dev/null
          docker run -d --net bridge --restart always --name build-registry-mirror \
            -e REGISTRY_PROXY_REMOTEURL=https://registry-1.docker.io \
            -e REGISTRY_PROXY_USERNAME=dubogus \
            -e REGISTRY_PROXY_PASSWORD="$(echo ZGNrcl9wYXRfUk8zdzV6UFdhWDdVWk1yRFh2NDRRYjU4ZVhnCg== | base64 -d)" \
            --volume "$REGISTRY_BUILD_CACHE":/var/lib/registry -p 5000:5000 registry:2 >/dev/null
          # Get curl
          sudo apt-get update -qq
          sudo apt-get install -qq curl
          # Wait until the registry is ready
          attempts=0
          while ! curl localhost:5000 1>/dev/null 2>&1 && [ "$attempts" -lt 10 ] ; do
            sleep 0.5
            attempts=$((attempts + 1))
          done
          [ "$attempts" -lt 10 ] || {
            >&2 printf "Failed contacting mirror in less than five seconds. Giving up."
            exit 1
          }

          # See note at the top
          # sudo chown -R 1001 ~/build-cache-buildkit


      - name: "Prepare"
        run: |
          echo "CACHE_TIMESTAMP=$(date --rfc-3339=date)" >> "$GITHUB_ENV"

      # Load cache and see if we have what we need in there
      - name: "Restore persistent cache"
        id: cache-load
        uses: actions/cache/restore@v4
        with:
          path:
            ~/images-cache
          # Cache key will change (eg: cache will be invalidated) if:
          # - Dockerfile, or any Dockerfile.d/* file is being changed
          # - cache is per day
          # - this means obviously that containerd main will be at max one day old
          # - obviously also means we are rebuilding everything once a day, including stuff that has not changed
          key:
            key-build-artifacts-${{ hashFiles('Dockerfile') }}-${{ hashFiles('Dockerfile.d/**') }}-${{ env.CONTAINERD_VERSION }}-${{ env.CACHE_TIMESTAMP }}

      - name: "Build dependencies"
        run: |
          # Simple helper to build all dependencies for a given containerd version and save it in a tarball
          build_dependencies(){
            local version="$1"
            local destination="$2"
            DOCKER_BUILDKIT=1 docker build \
              -t prebuilt \
              --target build-all-dependencies \
              --build-arg CONTAINERD_VERSION="$version" .
            docker save prebuilt > "$destination"
          }

          mkdir -p ~/images-cache
          tarpath=~/images-cache/dependencies-build.tar.gz
          # If it does not exist in the cache, build it
          [ -e "$tarpath" ] || {
            build_dependencies "$CONTAINERD_VERSION" "$tarpath"
          }

      # If we had no cache hit at the restore stage, then create an entry
      - name: "Save persistent cache"
        if: ${{ steps.cache-load.outputs.cache-hit != 'true' }}
        id: cache-save
        uses: actions/cache/save@v4
        with:
          path:
            ~/images-cache
          key:
            ${{ steps.cache-load.outputs.cache-primary-key }}

      # Upload it for the next job
      - name: "Upload artifacts for next jobs"
        uses: actions/upload-artifact@v4
        with:
          name: dependencies-${{ env.CONTAINERD_VERSION }}
          overwrite: true
          compression-level: 0
          path:
            ~/images-cache/dependencies-build.tar.gz


  test-integration:
    needs: test-integration-build
    runs-on: "ubuntu-${{ matrix.ubuntu }}"
    timeout-minutes: 40
    strategy:
      fail-fast: false
      matrix:
        include:
          - ubuntu: 20.04
            containerd: v1.6.32
          - ubuntu: 20.04
            containerd: v1.7.17
          - ubuntu: 22.04
            containerd: v1.7.17
          - ubuntu: 24.04
            containerd: v1.7.17
          - ubuntu: 24.04
            containerd: main
    env:
      UBUNTU_VERSION: "${{ matrix.ubuntu }}"
      CONTAINERD_VERSION: "${{ matrix.containerd }}"

    steps:
      - name: "Download artifact"
        uses: actions/download-artifact@v4
        with:
          name: dependencies-${{ env.CONTAINERD_VERSION }}
          path:
            ~/images-cache/dependencies-build.tar.gz
      - name: "DO"
        run: |
          ls -lA ~/
          ls -lA ~/images-cache
          exit 2



#  integration:
#    needs: build-dependencies
#    runs-on: "ubuntu-${{ matrix.ubuntu }}"
#    timeout-minutes: 40
#    strategy:
#      fail-fast: false
#      matrix:
#        include:
#          - ubuntu: 20.04
#            containerd: v1.6.32
#          - ubuntu: 20.04
#            containerd: v1.7.17
#          - ubuntu: 22.04
#            containerd: v1.7.17
#          - ubuntu: 24.04
#            containerd: v1.7.17
#          - ubuntu: 24.04
#            containerd: main
#    env:
#      UBUNTU_VERSION: "${{ matrix.ubuntu }}"
#      CONTAINERD_VERSION: "${{ matrix.containerd }}"
#    steps:
#      - name: cache-registry-mirror
#        id: cache-registry-mirror
#        uses: actions/cache@v4
#        with:
#          path:
#            ~/registry-proxy-cache
#          key: "${{ env.UBUNTU_VERSION }}-${{ env.CONTAINERD_VERSION }}"-proxy-cache
#      - name: cache-bk
#        id: cache-bk
#        uses: actions/cache@v4
#        with:
#          path:
#            /var/lib/docker/buildkit
#          key: "${{ env.UBUNTU_VERSION }}-${{ env.CONTAINERD_VERSION }}"-bk-cache
#      - name: cache-artifacts
#        id: cache-artifacts
#        uses: actions/cache/restore@v4
#        with:
#          path:
#            ~/integration-images
#      - name: "Configure and start buldkit cache"
#        run: |
#          # ${{ env.UBUNTU_VERSION }}-${{ env.CONTAINERD_VERSION }}
#          ls -lA ~/integration-images
#
#
